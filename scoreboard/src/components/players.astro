---
const { games, players } = Astro.props;

// Initialize stats map
const statsMap = new Map();
for (const id of Object.keys(players))
{
    statsMap.set(id, { wins: 0, draws: 0, losses: 0 });
}

// Compute stats
for (const g of games)
{
    if (!statsMap.has(g.white))
        statsMap.set(g.white, { wins: 0, draws: 0, losses: 0 });
    if (!statsMap.has(g.black))
        statsMap.set(g.black, { wins: 0, draws: 0, losses: 0 });

    const w = statsMap.get(g.white);
    const b = statsMap.get(g.black);

    if (g.result === "1-0") {w.wins += 1; b.losses += 1; }
    else if (g.result === "0-1") {b.wins += 1; w.losses += 1; }
    else if (g.result === "1/2-1/2") {w.draws += 1; b.draws += 1; }
}

// Get raw player entries
const playerEntries = Array.from(statsMap.entries()).map(([id, s]) => (
{
    name: players[id],
    wins: s.wins,
    draws: s.draws,
    losses: s.losses,
    points: s.wins + s.draws * 0.5,
    rank: 0,
}));
playerEntries.sort((a, b) => b.points - a.points || a.name.localeCompare(b.name));

// Assign ranks
let lastPoints = Infinity;
let rankIndex = -1;
for (const e of playerEntries)
{
    if (e.points !== lastPoints)
    {
        rankIndex += 1;
        lastPoints = e.points;
    }
    e.rank = rankIndex;
}
const totalRanks = rankIndex + 1;

// Leaderboard
const leaderboard = playerEntries.map((e) =>
{
    let symbol;
    if (e.rank === 0) symbol = "ðŸ¥‡";
    else if (e.rank === 1) symbol = "ðŸ¥ˆ";
    else if (e.rank === 2) symbol = "ðŸ¥‰";
    else if (e.rank === totalRanks - 1) symbol = "ðŸ’©";
    else symbol = `${e.rank + 1}.`;

    return {
        rankSymbol: symbol,
        name: e.name,
        wins: e.wins,
        draws: e.draws,
        losses: e.losses,
    };
});
---

<section>
    <h2>Leaderboard</h2>
    <div class="card">
        <table>
            <thead>
                <tr>
                    <th align="center">Rank</th>
                    <th>Player</th>
                    <th align="center">Wins</th>
                    <th align="center">Draws</th>
                    <th align="center">Losses</th>
                </tr>
            </thead>
            <tbody>
                {
                    leaderboard.map((row) => (
                        <tr>
                            <td align="center">
                                <strong>{row.rankSymbol}</strong>
                            </td>
                            <td>
                                <strong>{row.name}</strong>
                            </td>
                            <td align="center">{row.wins}</td>
                            <td align="center">{row.draws}</td>
                            <td align="center">{row.losses}</td>
                        </tr>
                    ))
                }
            </tbody>
        </table>
    </div>
</section>
