---
const { games, players } = Astro.props;

const statsMap = new Map<string, { wins: number; draws: number; losses: number }>();

// Find player stats
for (const g of games)
{
	if (!statsMap.has(g.white)) statsMap.set(g.white, { wins: 0, draws: 0, losses: 0 });
	if (!statsMap.has(g.black)) statsMap.set(g.black, { wins: 0, draws: 0, losses: 0 });
	statsMap.get(g.white)!.wins += g.result === '1-0' ? 1 : 0;
	statsMap.get(g.white)!.draws += g.result === '1/2-1/2' ? 1 : 0;
	statsMap.get(g.white)!.losses += g.result === '0-1' ? 1 : 0;

	statsMap.get(g.black)!.wins += g.result === '0-1' ? 1 : 0;
	statsMap.get(g.black)!.draws += g.result === '1/2-1/2' ? 1 : 0;
	statsMap.get(g.black)!.losses += g.result === '1-0' ? 1 : 0;
}

// Add players with no games
for (const p of Object.keys(players))
{
    if (!statsMap.has(p)) statsMap.set(p, { wins: 0, draws: 0, losses: 0 });
}

// Create a rank dict by points (win=1, draw=0.5, loss=0)
const rankMap = new Map<number, Array<{ name: string; wins: number; draws: number; losses: number }>>();
for (const [id, stats] of statsMap.entries()) {
    const points = stats.wins + stats.draws * 0.5;
    if (!rankMap.has(points)) rankMap.set(points, []);
    rankMap.get(points)!.push({ name: players[id], wins: stats.wins, draws: stats.draws, losses: stats.losses });
}

function getRankSymbol(rank) {
    if (rank == 0) return 'ðŸ¥‡';
    if (rank == 1) return 'ðŸ¥ˆ';
    if (rank == 2) return 'ðŸ¥‰';
    if (rank == sortedRanks.length - 1) return 'ðŸ’©';
    return `${rank + 1}.`;
}

// Prepare leaderboard rows in frontmatter
const leaderboard = [];
const sortedRanks = Array.from(rankMap.entries()).sort((a, b) => b[0] - a[0]);
let rank = 0;
for (const [points, group] of sortedRanks) {
    const sortedGroup = group.slice().sort((a, b) => a.name.localeCompare(b.name));
    for (const player of sortedGroup) {
        leaderboard.push({
            rankSymbol: getRankSymbol(rank),
            ...player
        });
    }
    rank++;
}
---

<section>
    <h2>Leaderboard</h2>
    <div class="card">
        <table>
            <thead>
                <tr>
                    <th align="center">Rank</th>
                    <th>Player</th>
                    <th align="center">Wins</th>
                    <th align="center">Draws</th>
                    <th align="center">Losses</th>
                </tr>
            </thead>
            <tbody>
                {
                    leaderboard.map(row => (
                        <tr>
                            <td align="center">
                                <strong>{row.rankSymbol}</strong>
                            </td>
                            <td>
                                <strong>{row.name}</strong>
                            </td>
                            <td align="center">{row.wins}</td>
                            <td align="center">{row.draws}</td>
                            <td align="center">{row.losses}</td>
                        </tr>
                    ))
                }
            </tbody>
        </table>
    </div>
</section>